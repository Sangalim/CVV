unit uDM;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  System.IOUtils, FireDAC.Stan.StorageBin;

type
  TDM = class(TDataModule)
    MTurnos: TFDMemTable;
    MTurnosUSUARIO: TStringField;
    MTurnosINICIO: TDateTimeField;
    MTurnosTERMINO: TDateTimeField;
    MTurnosDURACAO: TTimeField;
    MAtendentes: TFDMemTable;
    MAtendentesATENDENTE: TStringField;
    MAtendentesATIVO: TBooleanField;
    MAtendentesID: TAutoIncField;
    DSTurnos: TDataSource;
    DSAtendentes: TDataSource;
    FDStanStorageBinLink1: TFDStanStorageBinLink;
    procedure MTurnosCalcFields(DataSet: TDataSet);
    procedure MAtendentesAfterInsert(DataSet: TDataSet);
    procedure MAtendentesBeforePost(DataSet: TDataSet);
  private
    { Private declarations }
    /// <summary>
    ///   Pasta do arquivo da lista de pessoas
    /// </summary>
    function ArqListaDePessoas: string;
  public
    { Public declarations }
    /// <summary>
    ///   A pasta do funcionamento do sistema
    /// </summary>
    function PastaBase: string;
    /// <summary>
    ///   Dá o nome do arquivo para o dia de hoje
    /// </summary>
    function BaseDeHoje: string;
    /// <summary>
    ///   Dá o nome do arquivo para o dia informado.
    /// </summary>
    function BaseDoDia(const D0: TDateTime): string;
    /// <summary>
    ///   Abre ou cria atendentes
    /// </summary>
    procedure AbreAtendentes;
    /// <summary>
    ///   Salva o dataset de atendentes
    /// </summary>
    procedure SalvaAtendentes;
  end;

var
  DM: TDM;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

procedure TDM.AbreAtendentes;
begin
  if not(MAtendentes.Active) then
  begin
    if not(FileExists(ArqListaDePessoas)) then
    begin
      ForceDirectories(PastaBase);
      MAtendentes.CreateDataSet;
    end
    else begin
      MAtendentes.LoadFromFile(ArqListaDePessoas);
    end;
  end;
end;

function TDM.ArqListaDePessoas: string;
begin
  Result := PastaBase + 'Atendentes.BIN';
end;

function TDM.BaseDeHoje: string;
begin
  Result := BaseDoDia(Date);
end;

function TDM.BaseDoDia(const D0: TDateTime): string;
begin
  Result := PastaBase + FormatDateTime('YYYYMMDD', D0) + '.BIN';
end;

procedure TDM.MAtendentesAfterInsert(DataSet: TDataSet);
begin
  MAtendentesATIVO.AsBoolean := True;
end;

procedure TDM.MAtendentesBeforePost(DataSet: TDataSet);
begin
  MAtendentesATENDENTE.AsString := Trim(MAtendentesATENDENTE.AsString);
end;

procedure TDM.MTurnosCalcFields(DataSet: TDataSet);
begin
  if not(MTurnosINICIO.IsNull or MTurnosTERMINO.IsNull) then
  begin
    MTurnosDURACAO.AsDateTime := MTurnosTERMINO.AsDateTime - MTurnosINICIO.AsDateTime;
  end
  else begin
    MTurnosDURACAO.Clear;
  end;
end;

function TDM.PastaBase: string;
begin
  Result := ExtractFileName(ParamStr(0));
  Result := Copy(Result, 1, Length(Result) - 4);
  Result := TPath.GetSharedDocumentsPath + System.SysUtils.PathDelim + Result +
            System.SysUtils.PathDelim;
end;

procedure TDM.SalvaAtendentes;
begin
  MAtendentes.SaveToFile(ArqListaDePessoas);
end;

end.
